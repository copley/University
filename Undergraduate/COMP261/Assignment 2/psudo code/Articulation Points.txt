Create empty stack for queue nodes (node, parent, neighours, depth)
Add start node to the stack (start, root, null, 1)

while the stack isnt empty
	peek at the top of the stack -> (node, parent, neighbours, depth)
	
	if neighbours is null
		set node.depth <- depth
		set node.reach <- depth
		
		neighbours <- new queue
		add all the neighbours of node to the queue, except the nodes parent
		
	else if neighbours isnt empty
		get the first element in the queue (neighbour)
		if the depth of the neighbour isnt infinity (i.e. has been visited before)
			set node.reach to min(node.reach, neighbour.depth)
		Else
			Add the neighour to the stack to be explored (neighbour, node, null, depth+1)
	else if there are no neighbours left to explore
		if the node isnt the start node
			if node.reach >= parent.depth 
				then the parent is an articulation point so add to the list 
			
			set parent.reach <- min(parent.reach, node.reach)
			
		remove the stack element
	