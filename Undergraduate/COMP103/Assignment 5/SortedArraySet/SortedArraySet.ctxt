#BlueJ class context
comment0.params=
comment0.target=SortedArraySet()
comment0.text=Constructor\ to\ make\ a\ new\ empty\ set
comment1.params=comparator
comment1.target=SortedArraySet(java.util.Comparator)
comment1.text=Constructor\ to\ make\ a\ new\ empty\ set,\ with\ a\ given\ comparator
comment10.params=item
comment10.target=int\ findIndexInterpolationSearch(java.lang.Object)
comment11.params=
comment11.target=void\ ensureCapacity()
comment11.text=\ Ensure\ data\ array\ has\ sufficient\ number\ of\ items\r\n\ \ to\ add\ a\ new\ item\ \r\n
comment12.params=
comment12.target=java.util.Iterator\ iterator()
comment12.text=Return\ an\ iterator\ over\ the\ items\ in\ this\ set.
comment2.params=col
comment2.target=SortedArraySet(java.util.Collection)
comment2.text=Constructor\ that\ takes\ a\ whole\ collection\ and\ sorts\ it\ all\ at\ once
comment3.params=col\ comparator
comment3.target=SortedArraySet(java.util.Collection,\ java.util.Comparator)
comment3.text=Constructor\ that\ takes\ a\ whole\ collection\ and\ sorts\ it\ all\ at\ once
comment4.params=
comment4.target=int\ size()
comment4.text=\ Returns\ number\ of\ items\ in\ collection\ as\ integer\ \r\n
comment5.params=item
comment5.target=boolean\ add(java.lang.Object)
comment5.text=\ Add\ the\ specified\ item\ to\ this\ set\ (if\ it\ is\ not\ a\ duplicate\ of\ an\ item\r\n\ \ already\ in\ the\ set).\r\n\ \ Will\ not\ add\ the\ null\ value\ (throws\ an\ IllegalArgumentException\ in\ this\ case)\r\n\ \ Return\ true\ if\ the\ collection\ changes,\ and\ false\ if\ it\ did\ not\ change.\r\n\ \ \r\n\ \ I\ am\ always\ going\ to\ use\ binary\ search\ here\ because\ it\ tells\ you\ where\ to\ insert\ it\r\n
comment6.params=col
comment6.target=void\ addCollection(java.util.Collection)
comment6.text=\r\n\ Takes\ a\ collection\ (\ Assumes\ array\ isnt\ sorted\ )\ and\ then\ used\ the\ add\ function\r\n\ to\ insert\ them\ all\ into\ the\ array\r\n
comment7.params=item
comment7.target=boolean\ contains(java.lang.Object)
comment7.text=Return\ true\ if\ this\ set\ contains\ the\ specified\ item.
comment8.params=item
comment8.target=boolean\ remove(java.lang.Object)
comment8.text=\ Remove\ an\ item\ matching\ a\ given\ item\r\n\ \ Return\ true\ if\ the\ item\ was\ present\ and\ then\ removed.\r\n\ \ Make\ no\ change\ to\ the\ set\ and\ return\ false\ if\ the\ item\ is\ not\ present.\r\n
comment9.params=item
comment9.target=int\ findIndexBinarySearch(java.lang.Object)
comment9.text=\ Find\ the\ index\ of\ where\ an\ item\ is\ in\ the\ dataarray,\r\n\ \ (or\ where\ it\ ought\ to\ be,\ if\ it's\ not\ there).\r\n\ \ Assumes\ that\ the\ item\ is\ not\ null.\r\n\ \ Uses\ binary\ search\ and\ requires\ that\ the\ items\ are\ kept\ in\ order.\r\nShould\ use\ \ compareTo\ to\ compare\ values
numComments=13
