#BlueJ class context
comment0.params=newName
comment0.target=GeneralTreeNode(java.lang.String)
comment0.text=\r\n\ Creates\ a\ new\ node\r\n\ \r\n\ @param\ newName\ the\ name\ of\ the\ new\ node\r\n
comment1.params=
comment1.target=java.lang.String\ getName()
comment10.params=donorNode
comment10.target=void\ addChildrenFromNode(GeneralTreeNode)
comment10.text=\r\n\ Adds\ children\ from\ another\ donor\ node\ to\ this\ node\r\n\ \r\n\ CORE.\r\n\ \r\n\ This\ method\ is\ used\ to\ implement\ method\ 'moveSubtree'\ in\ class\ General\ Tree.\r\n\ \r\n\ @param\ donorNode\ the\ node\ that\ has\ the\ children\ to\ be\ added\r\n
comment11.params=depth
comment11.target=void\ printSubtree(int)
comment11.text=\ \r\n\ \ Prints\ the\ strings\ of\ all\ the\ nodes\ under\ the\ given\ target\ node\ \r\n\ \ (including\ the\ target\ node\ itself)\r\n\ \ \r\n\ \ CORE.\r\n\ \r\n\ \ HINT\:\ The\ most\ natural\ version\ of\ this\ method\ is\ recursive.\r\n
comment12.params=node
comment12.target=boolean\ contains(GeneralTreeNode)
comment12.text=\ \r\n\ \ Returns\ true\ if\ the\ subtree\ whose\ root\ starts\ with\ the\ receiver\ contains\ the\ node\ of\ the\ parameter\r\n\ \ \ \r\n\ \ COMPLETION.\r\n\ \r\n\ \ \ This\ method\ is\ used\ by\ moveSubtree(...),\ to\ ensure\ that\ we\ aren't\ trying\ to\ move\ a\ node\ \r\n\ \ (and\ hence\ the\ subtree\ rooted\ at\ that\ node)\ in\ a\ way\ that\ makes\ it\ become\ a\ child\ of\ one\r\n\ \ of\ it's\ existing\ descendants.\ \r\n\ \ \r\n\ \ HINT\:\ The\ most\ natural\ version\ of\ this\ method\ is\ recursive.\r\n\ \ \r\n\ \ @param\ node\ the\ node\ to\ check\ for\r\n\ \ @return\ true\ if\ the\ node\ is\ in\ the\ subtree,\ and\ false\ otherwise\r\n\ \ \r\n
comment13.params=
comment13.target=void\ printPathToRoot()
comment13.text=\ \r\n\ \ Prints\ the\ names\ of\ all\ the\ nodes\ in\ the\ path\ from\ the\ target\ node\ to\ the\ root\ of\ the\ entire\ tree\ \r\n\ \ \r\n\ \ COMPLETION.\r\n\ \r\n
comment14.params=targetDepth\ currentDepth
comment14.target=void\ printAllAtDepth(int,\ int)
comment14.text=\ \r\n\ \ Prints\ all\ the\ names\ of\ all\ the\ nodes\ at\ the\ given\ depth\ \r\n\ \ \r\n\ \ COMPLETION.\r\n\ \ \r\n\ \ Prints\ nothing\ if\ there\ are\ no\ nodes\ at\ the\ specified\ depth.\r\n\ \r\n\ \ HINT\:\ The\ most\ natural\ version\ of\ this\ method\ is\ recursive.\r\n\ \ \r\n\ \ @param\ depth\ the\ depth\ of\ the\ tree\ whoses\ nodes\ are\ to\ be\ listed.\ The\ root\ is\ at\ depth\ 0.\r\n
comment15.params=low\ high\ height
comment15.target=void\ setLocation(int,\ int,\ int)
comment16.params=
comment16.target=void\ redrawSubtree()
comment16.text=\r\n\ Draws\ all\ the\ nodes\ in\ the\ subtree\ that\ has\ the\ receiver\ as\ the\ root\ on\ the\ canvas\r\n\ \r\n\ \ CORE.\r\n\ \r\n\ \ The\ provided\ code\ just\ draws\ the\ tree\ node;\ you\ need\ to\ make\ it\ draw\ all\ the\ nodes.\r\n\ \ Make\ sure\ that\ parents\ and\ their\ children\ are\ connected\ by\ lines\ .\r\n\ \ \r\n\ \ HINT\:\ The\ most\ natural\ version\ of\ this\ method\ is\ recursive.\r\n\ \ \r\n\ \ HINT\:\ Use\ UI.drawLine(...)\ to\ draw\ the\ connecting\ lines\ and\ pay\ \r\n\ \ attention\ in\ what\ order\ you\ 'paint'\ on\ the\ canvas\ in\ order\ to\ get\ a\ good\ looking\ result.\ \r\n\ \ \r\n
comment17.params=
comment17.target=void\ redrawNode()
comment17.text=\r\n\ Draws\ a\ node\ at\ the\ location\ stored\ in\ that\ node.\ Drawing\ the\ node\ consists\ of\ drawing\ an\ oval,\ and\ writing\ the\ name\ string\r\n\ out\ "in"\ that\ oval.\ Note\ that\ no\ consideration\ is\ given\ to\ the\ length\ of\ the\ string,\ so\ this\ could\ look\ ugly.\r\n\ \r\n\ @param\ node\ \ the\ node\ to\ be\ draw\ on\ the\ canvas.\ This\ node\ should\ already\ have\ had\ it's\ location\ set\ earlier\ on.\r\n
comment2.params=
comment2.target=GeneralTreeNode\ getParent()
comment3.params=newParent
comment3.target=void\ setParent(GeneralTreeNode)
comment4.params=
comment4.target=java.util.Set\ getChildren()
comment5.params=newLocation
comment5.target=void\ setLocation(Location)
comment6.params=
comment6.target=Location\ getLocation()
comment7.params=newChild
comment7.target=void\ addChild(GeneralTreeNode)
comment7.text=\r\n\ Adds\ a\ child\ to\ the\ receiver\ node\r\n\ \r\n\ @param\ newChild\ the\ node/subtree\ to\ be\ added\ as\ a\ new\ child\r\n\ \r\n
comment8.params=targetName
comment8.target=GeneralTreeNode\ findNode(java.lang.String)
comment8.text=\r\n\ Finds\ the\ node\ whose\ name\ is\ equal\ to\ the\ target\ string\r\n\ \r\n\ CORE.\r\n\ \r\n\ If\ the\ target\ string\ appears\ multiple\ times,\ then\ just\ return\ the\ first\ one\ encountered.\ \r\n\ The\ 'addNode'\ method\ from\ class\ GeneralTree\ should\ guarantee\ that\ duplicate\ strings\ aren't\ added\ anyway.\r\n\ \r\n\ HINT\:\ The\ most\ natural\ implementation\ of\ this\ method\ is\ recursive.\r\n\ \r\n\ @param\ \ targetName\ the\ name\ of\ the\ node\ we\ are\ looking\ for\r\n\ @return\ the\ node\ that\ contains\ the\ target\ name,\ or\ null\ if\ no\ such\ node\ exists.\r\n
comment9.params=
comment9.target=void\ remove()
comment9.text=\r\n\ Removes\ the\ receiver\ node\ from\ the\ list\ of\ children\ of\ its\ parent\r\n\ \r\n\ CORE.\r\n\ \r\n
numComments=18
