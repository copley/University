/* Reflection.txt for COMP103
 * Name:
 * Usercode:
 * ID:
 */

For your reflection:
====================

First, describe how far you got on this assignment. If there was a problem
you got stuck on, what was that problem?

* Do you think that having both classes "Images" and "ImageNode" is overkill? 
  What pros and cons can you think of in comparison to just using ImageNode?

* Did you notice the different complexity of adding an image
  before vs after the cursor? 
  What are the complexities and what is the cause of this complexity difference? 

* Can you think of an extension to "ImageNode" that would avoid the 
  above mentioned complexity difference? 

* Cursors are a good way of obtaining quick access to a certain point in a list. 
  Can you think of a potential problem if a client does not use Images.setCursor correctly?
 
----------------------------------------------------------------

I was able to finish the assignment and had no problems

I dont think so, because the Images class is the container for the linked list of ImageNodes.
And it means you hide the extra code that handles the special cases of when you are removing the
of the list

The reason it was harder was that each node only knew about the node that came next
not the node that came before it. A way to make it easier would be to have a doublely linked
list, meaning that each node had a pointer to the node before it and after it. It would make 
it a bit more complicated when moving nodes around but it would make the inserting before alot easier

If the cursor is not set correctly then they woudent be retreving or removing the wrong data from the list
and this would cause some annoying bugs which might not be easy to spot
