#BlueJ class context
comment0.params=value
comment0.target=BSTNode(java.lang.Comparable)
comment1.params=
comment1.target=java.lang.Comparable\ getValue()
comment10.params=item
comment10.target=BSTNode\ remove(java.lang.Comparable)
comment10.text=\ \r\n\ \ Removes\ an\ item\ in\ the\ subtree\ formed\ by\ the\ receiver.\r\n\ \ \r\n\ \ COMPLETION\r\n\ \ \r\n\ \ ASSUMPTION\:\ The\ item\ to\ be\ removed\ does\ exist.\ \r\n\ \ The\ case\ that\ it\ cannot\ be\ found,\ should\ be\ dealt\ with\ before\ this\ method\ is\ called.\r\n\ \ \r\n\ \ Performs\ two\ tasks\:\r\n\ \ 1.\ locates\ the\ node\ to\ be\ removed,\ and\r\n\ \ 2.\ replaces\ the\ node\ with\ a\ suitable\ node\ from\ its\ subtrees.\r\n\ \ \r\n\ \ HINT\:\ use\ 'compareTo(...)'\ in\ order\ to\ compare\ the\ parameter\ \r\n\ \ with\ the\ data\ in\ the\ node.\ \r\n\ \r\n\ \ HINT\:\ For\ task\ 2,\ you\ should\ use\ call\ method\ 'replacementSubtreeFromChildren'\r\n\ \ to\ obtain\ this\ node.\ \r\n\ \ \r\n\ \ HINT\:\ When\ replacing\ a\ node,\ it\ is\ sufficient\ to\ change\ the\ value\ of\ the\ existing\ node\r\n\ \ with\ the\ value\ of\ the\ node\ that\ conceptually\ replaces\ it.\ There\ is\ no\ need\ to\ actually\ \r\n\ \ replace\ the\ node\ object\ as\ such.\ \r\n\ \ \r\n\ \ @param\ item\ -\ the\ item\ to\ be\ removed\r\n\ \ @returns\ the\ reference\ to\ the\ subtree\ with\ the\ item\ removed.\r\n\ \ \r\n\ \ HINT\:\ Often\ the\ returned\ reference\ will\ be\ the\ receiver\ node,\ but\ it\ is\ possible\ that\r\n\ \ the\ receiver\ itself\ needs\ to\ be\ removed.\ If\ you\ use\ a\ recursive\ approach,\ the\r\n\ \ latter\ case\ is\ the\ base\ case.\ \r\n\ \ \ \r\n
comment11.params=left\ right
comment11.target=BSTNode\ replacementSubtreeFromChildren(BSTNode,\ BSTNode)
comment11.text=\r\n\ \ Returns\ a\ replacement\ subtree\ for\ the\ receiver\ node\ (which\ is\ to\ be\ removed).\r\n\ \ \r\n\ \ COMPLETION\r\n\ \ \r\n\ \ The\ replacement\ subtree\ is\ determined\ from\ the\ children\ of\ the\ node\ to\ be\ removed.\r\n\ \ \r\n\ \ HINT\:\ There\ are\ several\ cases\:\r\n\ \ -\ node\ has\ no\ children\ \ \ \ \=>\ return\ null\r\n\ \ -\ node\ has\ only\ one\ child\ \=>\ return\ the\ child\r\n\ \ -\ node\ has\ two\ children\ \ \ \=>\ return\ the\ current\ subtree\ but\ with\r\n\ \ \ \ \ \ \ a)\ its\ (local)\ root\ replaced\ by\ the\ leftmost\ node\ in\ the\ right\ subtree,\ and\r\n\ \ \ \ \ \ \ b)\ the\ leftmmost\ node\ in\ the\ right\ subtree\ removed.\r\n\ \ \ \ \ \ \ \r\n\ @param\ left\ -\ the\ left\ subtree\ from\ which\ to\ include\ items.\ \ \ \ \ \ \ \r\n\ @param\ right\ -\ the\ right\ subtree\ from\ which\ to\ include\ items.\ \ \ \ \ \ \ \r\n\ @returns\ a\ reference\ to\ a\ subtree\ which\ contains\ all\ items\ from\ 'left'\ and\ 'right'\ combined.\ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n
comment12.params=
comment12.target=BSTNode\ getLeftmostNode()
comment12.text=\r\n\ \ Returns\ the\ leftmost\ node\ in\ the\ subtree\ formed\ by\ the\ receiver.\ \r\n\ \ \r\n\ \ COMPLETION\r\n\ \ \r\n\ \ HINT\:\ The\ code\ is\ very\ simple.\ Just\ keep\ descending\ left\ branches,\ \r\n\ \ until\ it\ is\ no\ longer\ possible.\ \r\n\ \r\n\ @returns\ a\ reference\ to\ the\ leftmost\ node,\ starting\ from\ the\ receiver.\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n
comment13.params=
comment13.target=int\ getBalanceFactor()
comment14.params=
comment14.target=BSTNode\ rotateLeft()
comment15.params=
comment15.target=BSTNode\ rotateRight()
comment16.params=stream
comment16.target=void\ printAllToStream(java.io.PrintStream)
comment16.text=\r\n\ Prints\ all\ the\ nodes\ in\ a\ subtree\ to\ a\ stream.\r\n\ \r\n\ @param\ stream\ -\ the\ output\ stream\ \r\n
comment17.params=indent
comment17.target=void\ printAll(java.lang.String)
comment17.text=\r\n\ Prints\ all\ the\ nodes\ in\ a\ subtree\ on\ the\ text\ pane.\r\n\ \r\n\ Can\ be\ useful\ for\ debugging\ purposes,\ but\ \r\n\ is\ most\ useful\ on\ small\ sample\ trees.\ \r\n\ \r\n\ Usage\:\ node.printAll("").\r\n
comment2.params=
comment2.target=BSTNode\ getLeft()
comment3.params=
comment3.target=BSTNode\ getRight()
comment4.params=
comment4.target=BSTNode\ getParent()
comment5.params=item
comment5.target=boolean\ contains(java.lang.Comparable)
comment5.text=\ \r\n\ Returns\ true\ if\ the\ subtree\ formed\ by\ the\ receiver\ contains\ 'item'\r\n\ \r\n\ CORE\r\n\r\n\ ASSUMPTION\:\ 'item'\ is\ not\ 'null'.\r\n\ \r\n\ HINT\:\ A\ recursive\ approach\ leads\ to\ a\ very\ short\ and\ simple\ code.\ \r\n\ \r\n\ HINT\:\ use\ 'compareTo(...)'\ in\ order\ to\ compare\ the\ parameter\ \r\n\ with\ the\ data\ in\ the\ node.\ \r\n\ \r\n\ HINT\:\ Make\ sure\ that\ you\ invoke\ 'compareTo'\ by\ always\ using\r\n\ the\ same\ receiver\ /\ argument\ ordering\ throughout\ the\ program,\ e.g.,\ \r\n\ always\ use\ the\ item\ as\ the\ receiver\ of\ 'compareTo'.\r\n\r\n@param\ item\ -\ the\ item\ to\ check\ for\r\n@returns\ true\ if\ the\ subtree\ contained\ 'item'\r\n\r\n
comment6.params=item
comment6.target=BSTNode\ add(java.lang.Comparable)
comment6.text=\r\n\ Adds\ an\ item\ to\ the\ subtree\ formed\ by\ the\ receiver.\r\n\ \r\n\ CORE\r\n\ \r\n\ Must\ not\ add\ an\ item,\ if\ it\ is\ already\ in\ the\ tree.\r\n\ \r\n\ HINT\:\ use\ 'compareTo(...)'\ in\ order\ to\ compare\ the\ parameter\ \r\n\ with\ the\ data\ in\ the\ node.\ \r\n\ \r\n\ @param\ item\ -\ the\ value\ to\ be\ added\r\n\ @returns\ false,\ if\ the\ item\ was\ in\ the\ subtree\ already.\ Returns\ true\ otherwise.\r\n
comment7.params=n\ o
comment7.target=void\ exchange(BSTNode,\ BSTNode)
comment8.params=
comment8.target=int\ height()
comment8.text=\r\n\ Returns\ the\ height\ of\ the\ receiver\ node.\r\n\ \r\n\ CORE\ \r\n\ \r\n\ HINT\:\ The\ number\ of\ children\ the\ receiver\ node\ may\ have,\ implies\r\n\ four\ cases\ to\ deal\ with\ (none,\ left,\ right,\ left\ &\ right).\r\n\ \r\n\ @returns\ the\ height\ of\ the\ receiver\r\n
comment9.params=
comment9.target=int\ minDepth()
comment9.text=\r\n\ Returns\ the\ length\ of\ the\ shortest\ branch\ in\ the\ subtree\ formed\ by\ the\ receiver.\r\n\ \r\n\ COMPLETION\r\n\ \r\n\ @returns\ the\ minimum\ of\ all\ branch\ lenghts\ starting\ from\ the\ receiver.\ \r\n\ \r\n
numComments=18
